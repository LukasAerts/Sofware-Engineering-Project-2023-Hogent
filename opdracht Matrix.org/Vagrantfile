# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
  Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  #config.vbguest.iso_path = "https://download.virtualbox.org/virtualbox/6.1.40/VBoxGuestAdditions_6.1.40.iso"
  #config.vbguest.auto_update = false
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "boxomatic/almalinux-9"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
   #config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
	config.vm.network "public_network", 
    bridge: "eth1",
    nic: "Realtek PCIe GbE Family Controller",
    #nic: "Intel(R) Wi-Fi 6 AX201 160MHz",
    ip: "192.168.20.4",    
	gateway: "192.168.20.254",
    dns: ["192.168.20.1", "8.8.8.8"] 



  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder ".", "/provisioning", type: "virtualbox", owner: "vagrant", group: "vagrant"
   
 
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
    config.vm.provider "virtualbox" do |vb|
	# Display the VirtualBox GUI when booting the machine
		vb.gui = false #set to true/false
	# Name of the virtual machine in virtualbox
		vb.name = "TheOracle"
	# define a group for the virtual machine in virtualbox

	# Customize the amount of memory on the VM:
		vb.memory = "2048"
		vb.cpus = "2"
	
	# Set VRAM 128mb
		vb.customize ["modifyvm", :id, "--vram", "128"]
	 
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # Plugins
  #
  # Check if the first argument to the vagrant
  # command is plugin or not to avoid the loop
  # Plugins
  #
  # Check if the first argument to the vagrant
  # command is plugin or not to avoid the loop

  config.vm.provision "shell", inline: <<-SHELL
  sudo dnf install boxes -y
  sudo dnf update -y
  export PATH="/usr/local/bin:$PATH"
  source ~/.bash_profile
  SHELL
  
  #add dns server 192.168.20.1 and 8.8.8.8
  config.vm.provision "shell", inline: "echo 'nameserver 192.168.20.1' >> /etc/resolv.conf"
  config.vm.provision "shell", inline: "echo 'nameserver 8.8.8.8' >> /etc/resolv.conf"

  #Setting the firewall
  config.vm.provision "shell", inline: "echo 'Setting up the firewall' | boxes -d shell -p a1l2"
  config.vm.provision "shell", path: "./provisioning/firewall.sh" 

  #Set the language
  config.vm.provision "shell", inline: "echo 'Continuing...' | boxes -d shell -p a1l2"
  config.vm.provision "shell", path: "./provisioning/lang-pyt.sh" 

  #Provision the Matrix Synapse setup
  config.vm.provision "shell", inline: "echo 'Installing Synapse' | boxes -d shell -p a1l2"
  config.vm.provision "shell", path: "./provisioning/theoracle.sh" 
  config.vm.provision "shell", inline: "echo 'Synapse installed' | boxes -d shell -p a1l2"

  #Provide the Matrix-Discord bridge
  config.vm.provision "shell", inline: "echo 'Installing Discord Bridge' | boxes -d shell -p a1l2"
  config.vm.provision "shell", path: "./provisioning/discord-bridge-setup.sh" 
  config.vm.provision "shell", inline: "echo 'Bridge installed' | boxes -d shell -p a1l2"
  
  #Provision the GUI and reboot (optional)
  #config.vm.provision "shell", inline: "echo 'Installing the GUI right now...' | boxes -d shell -p a1l2"
  #config.vm.provision "shell", path: "./provisioning/gui.sh" 
  #config.vm.provision "shell", inline: "echo 'GUI installed' | boxes -d shell -p a1l2"
  #config.vm.provision "shell", inline: "echo 'Rebooting now...'", run: "always"
  #config.vm.provision "shell", inline: "sudo reboot", run: "always"
  
  #Reboot at the end
  config.vm.provision "shell", inline: "echo 'Rebooting now...'", run: "always"
  config.vm.provision "shell", inline: "sudo reboot", run: "always"


end