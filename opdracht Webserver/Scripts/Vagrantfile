# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
  Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/almalinux-9.1"
  config.vm.hostname = "trinity"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  #config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
	config.vm.network "public_network", 
    bridge: "eth1",
    nic: "Killer E2500 Gigabit Ethernet Controller",
    ip: "192.168.20.2",
	gateway: "192.168.20.254"
	
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  
   # config.vm.synced_folder "./www", "/var/www/html",
   # :context => "system_u:object_r:httpd_sys_content_t:s0",	
   # :owner => "root", 
   # :group => "root", 
   # type: "rsync", 
   # rsync__exclude: [".git",  ".DS_Store"], 
   # rsync__args: ["-avz", "--rsync-path='sudo rsync'"],
   # mount_options: ["dmode=0755", "fmode=0644"]

   

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
    config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
      vb.gui = true
  #  Name of the virtual machine in virtualbox
	    vb.name = "trinity"
  # define a group for the virtual machine in virtualbox

  #   # Customize the amount of memory on the VM:
      vb.memory = "1024"
	    vb.cpus = "1"
	 
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  
  # Give the vm belgian point keyboard layout
   config.vm.provision "shell", inline: "localectl set-keymap be"
   
   #add dns server 192.168.20.1 and 8.8.8.8

	config.vm.provision "shell", inline: "echo 'nameserver 192.168.20.1' >> /etc/resolv.conf"
	config.vm.provision "shell", inline: "echo 'nameserver 8.8.8.8' >> /etc/resolv.conf"
  
   # start and enable firewalld
   config.vm.provision "shell", inline: "systemctl start firewalld"
   config.vm.provision "shell", inline: "systemctl enable firewalld"
   
   # provisioning script for the virtual machine
   config.vm.provision "shell", path: "./trinity.sh"
   config.vm.provision "shell", inline: "echo 'Vagrant has completed general config!'"
   config.vm.provision "shell", path: "./web.sh"
   config.vm.provision "shell", inline: "echo 'Vagrant has completed web service config!'"
   config.vm.provision "shell", path: "./db.sh"
   config.vm.provision "shell", inline: "echo 'Vagrant has completed db service  config!'"
   config.vm.provision "shell", path: "./cms.sh"
   config.vm.provision "shell", inline: "echo 'Vagrant has completed cms config!'"
   config.vm.provision "shell", path: "./reverseproxy.sh"
   config.vm.provision "shell", inline: "echo 'Vagrant has completed reverse proxy config!'"
   config.vm.provision "shell", path: "./rallly.sh"
   config.vm.provision "shell", inline: "echo 'Vagrant has completed rallly config!'"
   config.vm.provision "shell", inline: "echo 'Vagrant has completed building server trinity successfully!'"

end
